/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package it.eng.cepmiddleware.api.v1;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-05-15T12:18:46.813Z")

@Api(value = "engines", description = "the engines API")
public interface EnginesApi {

    @ApiOperation(value = "Send an event to a CEP engine", nickname = "enginesEngineIdEventsPost", notes = "", tags={ "engineEvents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Event was successfully sent to an engine"),
        @ApiResponse(code = 404, message = "Engine doesn't exist") })
    @RequestMapping(value = "/engines/{engineId}/events",
        method = RequestMethod.POST)
    ResponseEntity<Void> enginesEngineIdEventsPost(@ApiParam(value = "",required=true) @PathVariable("engineId") String engineId);


    @ApiOperation(value = "Returns info about the engine", nickname = "enginesEngineIdGet", notes = "", tags={ "engines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 404, message = "Requested CEP engine does not exist") })
    @RequestMapping(value = "/engines/{engineId}",
        method = RequestMethod.GET)
    ResponseEntity<Void> enginesEngineIdGet(@ApiParam(value = "",required=true) @PathVariable("engineId") String engineId);


    @ApiOperation(value = "Returns all rules within the engine", nickname = "enginesEngineIdRulesGet", notes = "", tags={ "engineRules", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 404, message = "CEP engine doesn't exist") })
    @RequestMapping(value = "/engines/{engineId}/rules",
        method = RequestMethod.GET)
    ResponseEntity<Void> enginesEngineIdRulesGet(@ApiParam(value = "",required=true) @PathVariable("engineId") String engineId);


    @ApiOperation(value = "Create a single rule within the engine", nickname = "enginesEngineIdRulesPost", notes = "", tags={ "engineRules", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Rule successfully created"),
        @ApiResponse(code = 400, message = "Rule doesn't exist or the engine doesn't exist"),
        @ApiResponse(code = 405, message = "A rule with the given Id already exists for the given engine, thus the creation failed") })
    @RequestMapping(value = "/engines/{engineId}/rules",
        method = RequestMethod.POST)
    ResponseEntity<Void> enginesEngineIdRulesPost(@ApiParam(value = "",required=true) @PathVariable("engineId") String engineId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody String rule);


    @ApiOperation(value = "Removes a single rule from the engine", nickname = "enginesEngineIdRulesRuleIdDelete", notes = "", tags={ "engineRules", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 404, message = "Requested rule doesn't exist within the given engine or the engine doesn't exist") })
    @RequestMapping(value = "/engines/{engineId}/rules/{ruleId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> enginesEngineIdRulesRuleIdDelete(@ApiParam(value = "",required=true) @PathVariable("engineId") String engineId,@ApiParam(value = "",required=true) @PathVariable("ruleId") String ruleId);


    @ApiOperation(value = "Returns if the rule is enabled within the engine", nickname = "enginesEngineIdRulesRuleIdEnabledGet", notes = "", tags={ "engineRules", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns if the rule is enabled or not"),
        @ApiResponse(code = 404, message = "Rule doesn't exist or the engine doesn't exist") })
    @RequestMapping(value = "/engines/{engineId}/rules/{ruleId}/enabled",
        method = RequestMethod.GET)
    ResponseEntity<Void> enginesEngineIdRulesRuleIdEnabledGet(@ApiParam(value = "",required=true) @PathVariable("engineId") String engineId,@ApiParam(value = "",required=true) @PathVariable("ruleId") String ruleId);


    @ApiOperation(value = "Enable or Disable a rule within an engine", nickname = "enginesEngineIdRulesRuleIdEnabledPut", notes = "", tags={ "engineRules", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The rule has been successfully enabled/disabled"),
        @ApiResponse(code = 404, message = "Rule doesn't exist or the engine doesn't exist") })
    @RequestMapping(value = "/engines/{engineId}/rules/{ruleId}/enabled",
        method = RequestMethod.PUT)
    ResponseEntity<Void> enginesEngineIdRulesRuleIdEnabledPut(@ApiParam(value = "",required=true) @PathVariable("engineId") String engineId,@ApiParam(value = "",required=true) @PathVariable("ruleId") String ruleId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Boolean enableSwitch);


    @ApiOperation(value = "Returns a single rule within the engine", nickname = "enginesEngineIdRulesRuleIdGet", notes = "", tags={ "engineRules", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 404, message = "Requested rule doesn't exist or the engine doesn't exist") })
    @RequestMapping(value = "/engines/{engineId}/rules/{ruleId}",
        method = RequestMethod.GET)
    ResponseEntity<Void> enginesEngineIdRulesRuleIdGet(@ApiParam(value = "",required=true) @PathVariable("engineId") String engineId,@ApiParam(value = "",required=true) @PathVariable("ruleId") String ruleId);


    @ApiOperation(value = "Modify a single rule within the engine", nickname = "enginesEngineIdRulesRuleIdPut", notes = "", tags={ "engineRules", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Rule successfully modified"),
        @ApiResponse(code = 404, message = "Requested rule doesn't exist within the given engine or the engine doesn't exist") })
    @RequestMapping(value = "/engines/{engineId}/rules/{ruleId}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> enginesEngineIdRulesRuleIdPut(@ApiParam(value = "",required=true) @PathVariable("engineId") String engineId,@ApiParam(value = "",required=true) @PathVariable("ruleId") String ruleId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody String rule);


    @ApiOperation(value = "Returns all available CEP engines", nickname = "enginesGet", notes = "", tags={ "engines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation") })
    @RequestMapping(value = "/engines",
        method = RequestMethod.GET)
    ResponseEntity<Void> enginesGet();

}
